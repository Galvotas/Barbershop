<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 380.628 380.627" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g>
<g xmlns="http://www.w3.org/2000/svg">
	<g>
		<path d="M168.104,146.719l-89.552,13.826c-1.337-1.22-2.738-2.382-4.244-3.398c-16.582-11.216-40.759-8.081-57.486,7.462    c-9.284,8.646-15.151,19.897-16.518,31.697c-1.407,12.203,2.096,23.529,9.879,31.902c1.938,2.09,4.087,3.924,6.422,5.5    c0,0.023,0,0,0,0.023c12.699,8.57,29.817,8.711,44.659,1.366c0.631,0.759,1.337,1.483,2.213,2.056    c4.904,3.339,11.561,2.031,14.889-2.861c2.592-3.83,2.341-8.723-0.228-12.25c6.936-7.94,11.332-17.527,12.471-27.493    c0.73-6.265,0.129-12.29-1.652-17.813l87.923-7.117L168.104,146.719z M77.864,193.065c-1.004,8.787-5.453,17.206-12.5,23.78    c-12.395,11.491-29.882,14.141-41.559,6.224c-1.523-1.028-2.954-2.254-4.209-3.608c-5.19-5.582-7.497-13.265-6.533-21.685    c1.022-8.787,5.465-17.218,12.512-23.757c12.383-11.525,29.881-14.159,41.564-6.242c1.529,1.028,2.948,2.248,4.204,3.608    C76.51,176.974,78.827,184.664,77.864,193.065z" fill="#d4af37" data-original="#000000" style=""/>
		<polygon points="222.135,165.934 374.638,67.729 380.628,57.278 270.536,107.618 221.072,166.033   " fill="#d4af37" data-original="#000000" style=""/>
		<path d="M123.656,333.827c5.815-1.086,11.531-3.188,16.909-6.235c19.839-11.315,30.051-33.466,24.3-52.64    c-0.514-1.752-1.208-3.422-1.985-5.057l48.676-103.716l135.7-160.292l-14.409,8.454L177.37,149.34l8.32,21.737l-39.037,81.593    c-3.818-2.09-8.051-3.596-12.629-4.46c-11.683-2.242-24.177,0.023-35.189,6.294c-19.828,11.291-30.051,33.455-24.3,52.629    c0.812,2.709,1.938,5.324,3.34,7.766c3.152,5.522,7.613,10.03,12.996,13.357c10.615,13.254,1.658,32.848,1.314,37.613    c-0.356,4.857,8.361,10.637,10.323,8.359C104.383,372.092,108.411,339.385,123.656,333.827z M195.242,158.571    c-2.581-2.68-2.487-6.913,0.187-9.505c2.674-2.575,6.937-2.499,9.494,0.193c2.58,2.674,2.487,6.93-0.176,9.493    C202.073,161.321,197.812,161.239,195.242,158.571z M134.194,316.452c-8.361,4.752-17.731,6.469-26.414,4.811    c-8.314-1.576-14.97-6.084-18.742-12.705c-0.929-1.611-1.658-3.328-2.184-5.103c-4.058-13.511,3.667-29.415,18.362-37.799    c8.36-4.765,17.737-6.469,26.425-4.834c8.303,1.588,14.977,6.106,18.742,12.716c0.905,1.6,1.646,3.328,2.184,5.104    C156.614,292.139,148.89,308.043,134.194,316.452z" fill="#d4af37" data-original="#000000" style=""/>
	</g>
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<script>// Promises 
var _eid_promises = {}; 
if (typeof isignDebug !== 'function') { 
    var isignDebug = function(msg){}; 
} 
// Turn the incoming message from extension 
// into pending Promise resolving 
window.addEventListener("message", function(event) { 
    if(event.source !== window) return; 
    if(event.data.src &amp;&amp; (event.data.src === "isign-background.js")) { 
        isignDebug("Page received: "); 
        isignDebug(event.data); 
        // Get the promise 
        if(event.data.nonce) { 
            var p = _eid_promises[event.data.nonce]; 
            // resolve 
            if(event.data.result === "ok") { 
                if(event.data.signature !== undefined) { 
                    if(p){ 
                        p.resolve({hex: event.data.signature}); 
                    } 
                } else if(event.data.certificate !== undefined) { 
                    if(p){ 
                        var info = {hex: event.data.certificate, module: event.data.module, slot: event.data.slot, name: event.data.name, issuer: event.data.issuer, isLoginCertificate: event.data.isLoginCertificate, isSigningCertificate: event.data.isSigningCertificate, validTo: event.data.validTo, log: event.data.log, driversList: event.data.driversList}; 
                        if(event.data.hardwareManufacturer){
                            info.hardwareManufacturer = event.data.hardwareManufacturer;
                        }
                        if(event.data.hardwareLabel){
                            info.hardwareLabel = event.data.hardwareLabel;
                        }
                        p.resolve(info); 
                    } 
                } else if(event.data.nativeHostVersion !== undefined) { 
                    var result = {nativeHostVersion: event.data.nativeHostVersion, driversFound: event.data.driversFound, driversList: event.data.driversList}; 
                    if(event.data.log){ 
                        result.log = event.data.log; 
                    } 
                    if(p){ 
                        p.resolve(result); 
                    } 
                } else if(event.data.version !== undefined) { 
                    var result = {version: event.data.extension + "/" + event.data.version, driversFound: event.data.driversFound}; 
                    if(event.data.log){ 
                        result.log = event.data.log; 
                    } 
                    if(p){ 
                        p.resolve(result); 
                    } 
                } else { 
                    isignDebug("No idea how to handle message"); 
                    isignDebug(event.data); 
                } 
            } else { 
                // reject 
                if(p){ 
                    p.reject(new Error(JSON.stringify(event.data))); 
                } 
            } 
            delete _eid_promises[event.data.nonce]; 
        } else { 
            isignDebug("No nonce in event msg"); 
        } 
    } 
}, false); 
 
 
function IsignChromeSigning() { 
    function nonce() { 
        var val = ""; 
        var hex = "abcdefghijklmnopqrstuvwxyz0123456789"; 
        for(var i = 0; i &lt; 16; i++) val += hex.charAt(Math.floor(Math.random() * hex.length)); 
        return val; 
    } 
 
    function messagePromise(msg) { 
        return new Promise(function(resolve, reject) { 
            // amend with necessary metadata 
            msg['nonce'] = nonce(); 
            msg['src'] = 'isign-page.js'; 
            // send message 
            window.postMessage(msg, "*"); 
            // and store promise callbacks 
            _eid_promises[msg.nonce] = { 
                resolve: resolve, 
                reject: reject 
            }; 
        }); 
    } 
    this.getCertificate = function(options) { 
        if(options.policyId &amp;&amp; (typeof options.policyIds === 'undefined' || options.policyIds.length == 0)){ 
            options.policyIds = new Array(); 
            options.policyIds.push(options.policyId); 
        } 
        if(typeof options.residency === 'undefined') { 
            options.residency = ''; 
        } 
        var msg = {type: 'CERT', lang: options.lang, certificatePurpose: options.certificatePurpose, isInitial: options.isInitial, policyId: options.policyId, policyIds: options.policyIds, bulkSigning: options.bulkSigning, residency: options.residency}; 
        isignDebug("getCertificate()"); 
        return messagePromise(msg); 
    }; 
    this.sign = function(cert, hash, options) { 
        var msg = {type: 'SIGN', cert: cert.hex, hash: hash.hex, module: cert.module, slot: cert.slot, isLoginCertificate: cert.isLoginCertificate, isSigningCertificate: cert.isSigningCertificate, hashAlgorithm: hash.type, lang: options.lang}; 
        isignDebug("sign()"); 
        return messagePromise(msg); 
    }; 
    this.getVersion = function() { 
        isignDebug("getVersion()"); 
        return messagePromise({ 
            type: 'VERSION' 
        }); 
    }; 
}</script></g></svg>
